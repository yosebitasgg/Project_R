---
title: "Crop"
format: html
editor: visual
---

```{r}
install.packages("bnlearn")
```

```{r}
library(tidyverse)
```

```{r}
library(bnlearn)
```

```{r}
data = read_csv("../data/crop.csv")
head(data);
```

```{r}
data = data |>
        select(-crop)
head(data)
```

```{r}
colnames(data) = c("N", "P", "K", "T", "H", "pH", "R", "Y")
```

```{r}
dag = model2network("[T][R][H|T:R][pH|T:R][N|H][K|H][P|pH][Y|N:K:P]")
```

```{r}
graphviz.plot(dag, shape = "ellipse")
```

```{r}
crop_fit = bn.fit(dag, data = data)
```

```{r}
crop_fit$N
```

```{r}
mod_lm = lm(N~H, data = data)
coef(mod_lm)
```

```{r}
ggplot(data, aes(x = H, y = N)) +
  geom_point(color = "steelblue", alpha = 0.3) +
  geom_smooth(method = lm, se = FALSE, lwd = 2, color = "dodgerblue") +
  labs(x = "Humedad", y = "Nivel de nitrógeno", title = "") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5, face = "bold", margin = margin(0, 0, 5, 0)),
        axis.title.x = element_text(face = "bold"),
        axis.title.y = element_text(face = "bold", angle = 90))
```

```{r}
install.packages("gratia")
```

```{r}
library(mgcv)
library(gratia)
```

```{r}
mod_gam_N = gam(N ~ s(H), data = data, method = "REML")
```

```{r}
draw(mod_gam_N, residuals = TRUE, rug = FALSE) +
  labs(x = "Humedad", y = "s(Humedad)", title = "Efecto parcial de la humedad sobre el nitrógeno") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5, face = "bold",
                                  margin = margin(0, 0, 5, 0)),
        axis.title.x = element_text(face = "bold"),
        axis.title.y = element_text(face = "bold", angle = 90),
        legend.title = element_text(hjust = 0.5, face = "bold"),
        legend.text = element_text(hjust = 0.5),
        strip.text = element_text(hjust = 0.5, face = "bold",
                                  margin = margin(2, 3, 3, 3)),
        plot.subtitle = element_text(hjust = 0.5, face = "bold",
                                     size = 10,
                                     margin = margin(0, 0, 5, 0)))
```

```{r}
mod_Y_NKP = lm(Y~N+K+P, data = data)
```

```{r}
summary(mod_Y_NKP)
```

```{r}
score(dag, data = data, type = "bic-g")

```

Bic = -92712.77

```{r}
mod_gam_H = gam(H ~ s(T) + s(R), data = data, method = "REML")
mod_gam_pH = gam(pH ~ s(T) + s(R), data = data, method = "REML")
mod_gam_N = gam(N ~ s(H), data = data, method = "REML")
mod_gam_K = gam(K ~ s(H), data = data, method = "REML")
mod_gam_P = gam(P ~ s(pH), data = data, method = "REML")
mod_gam_Y = gam(Y ~ s(N) + s(K) + s(P), data = data, method = "REML")
```

```{r}
mod_T = lm(T ~ 1, data = data)
mod_R = lm(R ~ 1, data = data)
```

Al ser un nodo padre no tiene una distribucion normal por lo que se pone que T es dependiente de 1 (Un solo intercepto Beta)

```{r}
-1/2*(BIC(mod_T) + BIC(mod_R) + BIC(mod_gam_H) + BIC(mod_gam_pH) +
           BIC(mod_gam_N) + BIC(mod_gam_K) + BIC(mod_gam_P) + BIC(mod_gam_Y))
```

P(Y\>70 \| T = 30, R = 100)

```{r}
cpquery(crop_fit, event = (Y > 70), evidence = list(T = 30, R = 100), method = "lw")
```

P(Y ≥ 10000 ∣ N \< 72 ∪ {K ≤ 20, P ≤ 30})

```{r}
cpquery(crop_fit, event = (Y >= 10000), evidence = ((N < 72) | ((K <= 20) & (P <= 30))), n = 10^6)
```
