---
title: "Situación problema: Contaminación ambiental y salud en México"
author: "Yoseba, Pedro y Santiago"
format:
   html:
     toc: true
     html-math-method: katex
     embed-resources: true
     self-contained-math: true
     df-print: kable
editor: source
---

# Extracción de los datos

```{r}
library(mgcv)
library(gratia)
library(readr)
library(readxl)
library(dplyr)
library(tidyverse)
```

```{r}
library(bnlearn)
library(Rgraphviz) 
```

## Archivos:

Encuesta Nacional de Salud y Nutrición

### Muestras de sangre:

ensanut2022_muestras.csv

```{r}
muestras = read_delim("../data/ensanut2022_muestras.csv", delim = ";")
View(muestras)
```

ensanut2022_muestras-diccionario.xlsx

```{r}
dicc1 <- read_xlsx("../data/ensanut2022_muestras-diccionario.xlsx")

colnames(dicc1) <- c("Variable", 
                        "Posición", 
                        "Etiqueta", 
                        "Nivel de medición", 
                        "Ancho de columna")

dicc1 <- dicc1[-1, ]

View(dicc1)
```

### Información socio-demográfica:

ensanut2022_socdem.csv

```{r}
info = read_delim("../data/ensanut2022_socdem.csv", delim = ";")
View(info)
```

ensanut2022_socdem-diccionario.xlsx

```{r}
dicc2 <- read_xlsx("../data/ensanut2022_socdem-diccionario.xlsx")
colnames(dicc2) <- c("Variable", 
                        "Posición", 
                        "Etiqueta", 
                        "Nivel de medición", 
                        "Ancho de columna")

dicc2 <- dicc2[-1, ]
View(dicc2)
```

### Información de contaminantes del aire:

calidad_aire_2025.csv

```{r}
contaminantes = read_delim("../data/calidad_aire_2025.csv")
View(contaminantes)
```

## Análisis inicial / Investigación previa

### Biomarcadores

En "ensanut2022_muestras.csv" se encontraron los siguientes **biomarcadores sanguíneos y séricos** :

#### Hemoglobina y derivados

-   `valor_HB1AC`: Hemoglobina glucosilada (%)\
-   `valor_EAG`: Glucosa promedio estimada\
-   `valor_HEMOGLOBINA (hb02)`: Hemoglobina medida en sangre capilar/venosa\
    **Relevancia:** eje cardiometabólico (diabetes/hipoxia); se modelan vs. PM₂.₅/NOx.

------------------------------------------------------------------------

#### Glucosa e insulina

-   `valor_GLU_SUERO`: Glucosa sérica (mg/dL)\
-   `valor_INSULINA`: Insulina (µUI/mL)\
    **Relevancia:** dismetabolismo asociado a exposición; outcomes primarios.

------------------------------------------------------------------------

#### Lípidos

-   `valor_COL_HDL`: Colesterol HDL\
-   `valor_COL_LDL`: Colesterol LDL\
-   `valor_COLEST`: Colesterol total\
-   `valor_TRIG`: Triglicéridos\
    **Relevancia:** perfil lipídico sensible a contaminación; HDL (↓) y TG/LDL (↑) como señales.

------------------------------------------------------------------------

#### Marcadores inflamatorios

-   `valor_PCR`: Proteína C Reactiva (mg/dL)\
-   `valor_PROTCREAC`: Proteína C Reactiva ultrasensible (mg/L)\
    **Relevancia:** inflamación sistémica; indicador principal de respuesta a mezcla.

------------------------------------------------------------------------

#### Marcadores de función renal y ácido-base

-   `valor_CREAT`: Creatinina (mg/dL)\
-   `valor_AC_URICO`: Ácido úrico (mg/dL)\
    **Relevancia:** función renal y estrés oxidante; análisis secundario.

------------------------------------------------------------------------

#### Micronutrientes y vitaminas

-   `valor_FERRITINA`: Ferritina (hierro)\
-   `valor_FOL`: Folato\
-   `valor_HCST`: Homocisteína\
-   `valor_VIT_B12`: Vitamina B12\
-   `valor_VIT_D`: Vitamina D\
    **Relevancia:** soporte a mecanismos (oxidativo/endotelial); descriptivo/ajuste.

------------------------------------------------------------------------

#### Marcadores hematológicos

-   `valor_STFR_FEB23`: Receptor soluble de transferrina (hierro y anemia)\
    **Relevancia:** contexto de estado férrico; análisis descriptivo.

------------------------------------------------------------------------

### Covariables

En "ensanut2022_socdem.csv" se encontraron las siguientes covariables:

#### Demográficas básicas

-   `h0302` — **Sexo** (M/F).\
-   `h0303`, `h0304a`/`h0304m`/`h0304d`, `meses` — **Edad**.\
-   `h0320`/`h0320q` — **Conyugal/pareja**.\
-   `h0305`/`h0305_es` — **Parentesco con jefatura**.\
    **Uso:** ajuste por factores demográficos clave.

------------------------------------------------------------------------

#### Lengua y etnicidad cultural (contexto sociocultural)

-   `h0311` — **Habla lengua indígena**.\
-   `h0312` — **Habla español**.\
    **Uso:** determinantes sociales (proxy).

------------------------------------------------------------------------

#### Escolaridad y estatus educativo

-   `h0313` — **Asistencia escolar**.\
-   `h0314` — **Tipo de escuela**.\
-   `h0317a`/`h0317g` — **Último nivel/grado**.\
-   `h0318` — **Sabe leer/escribir**.\
    **Uso:** **SES/educación** como confusor.

------------------------------------------------------------------------

#### Ocupación y actividad económica

-   `h0319` — **Situación actual**.\
-   `h0321`–`h0324`/`h0324esp` — **Trabajo/categoría**.\
    **Uso:** exposición diferencial por ocupación.

------------------------------------------------------------------------

#### Acceso y uso de servicios de salud

-   `h0309`, `h0309e` — **Sitio de atención**.\
-   `H0310A`–`H0310C`, `h0310e` — **Derechohabiencia**.\
-   `h0401`–`h0409`, `H0405A`–`C`, `H0407A`–`C` — **Uso/barreras**.\
    **Uso:** patrón de atención (confusor).

------------------------------------------------------------------------

#### Programas sociales (proxy de nivel socioeconómico)

-   `h0601a`–`h0601n`, `h0603a`–`h0603n` — **Apoyos**.\
-   `h0604ba`/`h0604bb` — **INSABI**.\
    **Uso:** **SES** y protección social.

------------------------------------------------------------------------

#### COVID-19 (historia y vacunación)

-   `h1205`, `h1207a`, `h1207b` — **Diagnóstico**.\
-   `H1213A`–`T`, `h1213e`, `h1215`, `h1216` — **Secuelas/síntomas**.\
-   `h1602`, `h16041d/m/a`–`h16044d/m/a`, `h16051`–`h16054` — **Vacunación**.\
    **Uso:** control por inflamación reciente.

------------------------------------------------------------------------

#### Geografía y urbanidad (exposición contextual)

-   `entidad1`/`desc_ent1`, `municipio1`/`desc_mun1` — **Localización**.\
-   `region` — **Región**.\
-   `estrato` — **Urbano–rural**.\
    **Uso:** llaves territoriales y gradiente urbano–rural.

------------------------------------------------------------------------

#### Diseño muestral (¡no son confusores, pero son obligatorios en el análisis!)

-   `ponde_f` — **Ponderador**.\
-   `est_sel` — **Estrato**.\
-   `upm` — **Conglomerado/UPM**.\
    **Uso:** especificar en `survey/srvyr` para inferencia válida.

------------------------------------------------------------------------

### Contaminantes

-   `SO_2` — Dióxido de azufre (SO₂)\
    **Relevancia:** combustión industrial/energética.
-   `CO` — Monóxido de carbono\
    **Relevancia:** marcador de mezcla vehicular.
-   `NOx` — Óxidos de nitrógeno\
    **Relevancia:** tráfico; precursor de nitratos.
-   `COV` — Compuestos orgánicos volátiles\
    **Relevancia:** precursores de ozono/mezcla; algunos tóxicos.
-   `PM_010` — Partículas PM₁₀\
    **Relevancia:** morbilidad respiratoria/cardiovascular.
-   `PM_2_5` — Partículas PM₂.₅\
    **Relevancia:** eje principal cardiometabólico/inflamatorio.
-   `NH_3` — Amoniaco\
    **Relevancia:** *(sin interpretación directa en este análisis; se mantiene listado)*.

> **Nota de datos:** en `Fuentes naturales` algunos contaminantes pueden aparecer `NA`.

------------------------------------------------------------------------

#### Variables de localización

-   `Entidad_federativa` — Nombre oficial de la entidad.\
-   `Municipio` — Nombre oficial del municipio.\
-   `Entidad` — Duplicado/normalizado de la entidad.\
    **Uso:** llaves para *join* con ENSANUT (Entidad/Municipio).

------------------------------------------------------------------------

#### Clasificación de fuentes

-   `Tipo_de_Fuente` — Categoría de emisión:
    -   **Fuentes fijas** (industria/energía)\
    -   **Fuentes de área** (residencial/comercial/difusas)\
    -   **Fuentes móviles carreteros**\
    -   **Fuentes móviles que no circulan por carretera**\
    -   **Fuentes naturales**\
        **Uso:** permite análisis por origen de emisiones y sensibilidad por fuente.

------------------------------------------------------------------------

# Tratamiento de los datos y tablas

## Limpieza de tablas

Seleccionamos unicamente las columnas requeridas para el analisis

```{r}
catalogo_entidades <- tibble::tibble(
  codigo = sprintf("%02d", 1:32),
  Entidad = c(
    "Aguascalientes", "Baja California", "Baja California Sur",
    "Campeche", "Coahuila", "Colima", "Chiapas", "Chihuahua",
    "Ciudad de México", "Durango", "Guanajuato", "Guerrero",
    "Hidalgo", "Jalisco", "México", "Michoacán",
    "Morelos", "Nayarit", "Nuevo León", "Oaxaca",
    "Puebla", "Querétaro", "Quintana Roo", "San Luis Potosí",
    "Sinaloa", "Sonora", "Tabasco", "Tamaulipas",
    "Tlaxcala", "Veracruz", "Yucatán", "Zacatecas"
  )
)
```

Hacemos un promedio de las variables deseadas de contaminantes

```{r}
data1 <- contaminantes |>
  select(Entidad, Tipo_de_Fuente, PM_2_5, NOx, CO) |>
  filter(Tipo_de_Fuente == "Fuentes fijas") |>
  group_by(Entidad) |>
  summarise(PM_2_5 = mean(PM_2_5, na.rm = TRUE),
            NOx    = mean(NOx,    na.rm = TRUE),
            CO    = mean(CO,    na.rm = TRUE),
            .groups = "drop")

data1 <- data1 |>
  inner_join(catalogo_entidades, by = "Entidad") |>
  arrange(codigo)

head(data1)
```

```{r}
data2 <- muestras |>
  select(FOLIO_I, h0303, h0302, valor_HB1AC, valor_GLU_SUERO, valor_INSULINA, valor_CREAT, valor_PCR)

head(data2)
```

```{r}
data3 <- info |>
  select(FOLIO_I, h0317a, h0317g, entidad = entidad1, region, estrato)

head(data3)
```

## Unión de tablas

```{r}
data2 <- data2 |> dplyr::distinct(FOLIO_I, .keep_all = TRUE)
data3 <- data3 |> dplyr::distinct(FOLIO_I, .keep_all = TRUE)
```

```{r}
data_ensanut <- data2 |>
  inner_join(data3, by = "FOLIO_I")

View(data_ensanut)
```

```{r}
aire_ent <- data1 |>
  transmute(codigo, PM_2_5, NOx, CO) 

data_final <- data_ensanut |>
  left_join(aire_ent, by = c("entidad" = "codigo"))

View(data_final)
```

# DAG 1

```{r}
colnames(data_final)
```

```{r}
data_dag1 = data_final |>
        select(NOx, PM_2_5, valor_GLU_SUERO, valor_HB1AC, valor_INSULINA)
view(data_dag1)
```

```{r}
colnames(data_dag1) = c("N","P", "Ga","Gc", "I")
view(data_dag1)

```

```{r}
dag1 = model2network("[P][N][Gc|P:N][Ga|P:N][I|P:N]")
```

```{r}
graphviz.plot(dag1, shape = "ellipse")
```

```{r}
str(data_dag1)
```

```{r}
data_dag1 <- data_dag1 |>
  mutate(across(where(is.character), ~ as.numeric(gsub(",", ".", .))))
```

```{r}
crop_fit = bn.fit(dag1, data = data_dag1)
```

```{r}
crop_fit$Ga
```

```{r}
mod_lm = lm(N~Gc, data = data_dag1)
coef(mod_lm)
```

```{r}
ggplot(data_dag1, aes(x = N, y = Gc)) +
  geom_point(color = "steelblue", alpha = 0.3) +
  geom_smooth(method = lm, se = FALSE, lwd = 2, color = "dodgerblue") +
  labs(x = "Gases del Trafico", y = "Glucosa acumulada", title = "") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5, face = "bold", margin = margin(0, 0, 5, 0)),
        axis.title.x = element_text(face = "bold"),
        axis.title.y = element_text(face = "bold", angle = 90))
```


```{r}
library(mgcv)
library(gratia)
```

```{r}
mod_gam_N = gam(N ~ s(Gc), data = data_dag1, method = "REML")
```

```{r}
draw(mod_gam_N, residuals = TRUE, rug = FALSE) +
  labs(x = "Gases del Trafico", y = "s(Glucosa acumulada)", title = "Efecto parcial de los gases del trafico sobre la glucosa acumulada") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5, face = "bold",
                                  margin = margin(0, 0, 5, 0)),
        axis.title.x = element_text(face = "bold"),
        axis.title.y = element_text(face = "bold", angle = 90),
        legend.title = element_text(hjust = 0.5, face = "bold"),
        legend.text = element_text(hjust = 0.5),
        strip.text = element_text(hjust = 0.5, face = "bold",
                                  margin = margin(2, 3, 3, 3)),
        plot.subtitle = element_text(hjust = 0.5, face = "bold",
                                     size = 10,
                                     margin = margin(0, 0, 5, 0)))
```

```{r}
vars <- nodes(dag1)                                       # nodos del DAG (p.ej. P,N,A,Gc,Ga,I)
data_sub <- data_dag1[, vars, drop = FALSE]               # solo columnas del DAG
data_cc  <- data_sub[complete.cases(data_sub), , drop=FALSE]  # sin NAs

# Diagnóstico
cat("Filas totales:", nrow(data_sub), "\n")
cat("Filas completas:", nrow(data_cc), "\n")

# Puntuar con BIC gaussiano
score(dag1, data = data_cc, type = "bic-g")
score(dag1, data = data_cc, type = "aic-g")
```
>   Tenemos un score **BIC** de `-41525.62`

>   Tenemos un score **AIC** de `-41482.93`

# DAG 2
```{r}
data1 <- contaminantes |>
  select(Entidad, PM_2_5, NOx) |>
  group_by(Entidad) |>
  summarise(PM_2_5 = mean(PM_2_5, na.rm = TRUE),
            NOx    = mean(NOx,    na.rm = TRUE),
            .groups = "drop")

data1 <- data1 |>
  inner_join(catalogo_entidades, by = "Entidad") |>
  arrange(codigo)

head(data1)
```

```{r}
data2 <- muestras |>
  select(FOLIO_I, h0303, h0302, valor_HB1AC, valor_GLU_SUERO, valor_INSULINA, valor_PROTCREAC,valor_PCR)

head(data2)
```

```{r}
data3 <- info |>
  select(FOLIO_I, h0317a, h0317g, entidad = entidad1, region, estrato)

head(data3)
```



## Unión de tablas
```{r}
data2 <- data2 |> dplyr::distinct(FOLIO_I, .keep_all = TRUE)
data3 <- data3 |> dplyr::distinct(FOLIO_I, .keep_all = TRUE)
```

```{r}
data_ensanut <- data2 |>
  inner_join(data3, by = "FOLIO_I")
```

```{r}
aire_ent <- data1 |>
  transmute(codigo, PM_2_5, NOx) 

data_final2 <- data_ensanut |>
  left_join(aire_ent, by = c("entidad" = "codigo"))

View(data_final2)
```

```{r}
data2 <- data_final2 |> 
  mutate(across(contains("valor"), ~ as.numeric(gsub(",", ".", .))))
```


```{r}
data_dag_inf <- data2 |> 
  select(NOx, PM_2_5, valor_PROTCREAC,valor_PCR,valor_HB1AC,valor_INSULINA,valor_GLU_SUERO) |> drop_na()
```


```{r}
colnames(data_dag_inf) = c("N","P", "Gc","CRP", "Hb", "I","Ga")
view(data_dag_inf)

```

```{r}
library(bnlearn)

dag2 = model2network("[N][P][Gc|P:N][I|P:N][Ga|P:N][Hb|I:Ga:P:N][CRP|Gc:P:N]")


```

```{r}
graphviz.plot(dag2, shape = "ellipse")
```

```{r}
str(data_dag_inf)
```

```{r}
data_dag_inf <- data_dag_inf |>
  mutate(across(where(is.character), ~ as.numeric(gsub(",", ".", .))))
```

```{r}
crop_fit = bn.fit(dag2, data = data_dag_inf)
```


```{r}
mod_lm = lm(N~P, data = data_dag_inf)
coef(mod_lm)
```

```{r}
ggplot(data_dag_inf, aes(x = N, y = Gc)) +
  geom_point(color = "steelblue", alpha = 0.3) +
  geom_smooth(method = "lm", se = FALSE, size = 1.2, color = "dodgerblue") +
  labs(x = "NOx (N)", y = "Glucosa acumulada (Gc)", title = "Relación NOx y Glucosa Acumulada") +
  theme_bw() +
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold", margin = margin(0, 0, 5, 0)),
    axis.title.x = element_text(face = "bold"),
    axis.title.y = element_text(face = "bold", angle = 90)
  )
```

```{r}
mod_gam_N <- gam(N ~ s(Gc), data = data_dag_inf, method = "REML")
```

```{r}
draw(mod_gam_N, residuals = TRUE, rug = FALSE) +
  labs(x = "Glucosa acumulada (Gc)", y = "s(NO x)", 
       title = "Efecto parcial de la glucosa acumulada sobre NOx") +
  theme_bw() +
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold", margin = margin(0, 0, 5, 0)),
    axis.title.x = element_text(face = "bold"),
    axis.title.y = element_text(face = "bold", angle = 90),
    legend.title = element_text(hjust = 0.5, face = "bold"),
    legend.text = element_text(hjust = 0.5),
    strip.text = element_text(hjust = 0.5, face = "bold", margin = margin(2, 3, 3, 3)),
    plot.subtitle = element_text(hjust = 0.5, face = "bold", size = 10, margin = margin(0, 0, 5, 0))
  )
```

```{r}
vars <- nodes(dag2)                                      # nodos del DAG (p.ej. P,N,A,Gc,Ga,I)
data_sub <- data_dag_inf[, vars, drop = FALSE]                  # solo columnas del DAG
data_sub <- data_sub |> 
  mutate(across(where(is.factor), ~ as.numeric(as.character(.))),
         across(where(is.integer), as.numeric))
data_cc <- data_sub[complete.cases(data_sub), , drop = FALSE]   # sin NAs

# Diagnóstico
cat("Filas totales:", nrow(data_sub), "\n")
cat("Filas completas:", nrow(data_cc), "\n")

# Puntuar con BIC gaussiano
score(dag2, data = data_cc, type = "bic-g")
score(dag2, data = data_cc, type = "aic-g")
```
>   Tenemos un score **BIC** de `-9963.146`

>   Tenemos un score **AIC** de `-9909.397`


# DAG 3

```{r}
colnames(data_final)
```

```{r}
data_dag3 = data_final |>
        select(NOx, PM_2_5, CO, valor_PCR, valor_CREAT, valor_INSULINA)
view(data_dag3)
```

```{r}
colnames(data_dag3) = c("N","P","C","PC","Cr", "I")
view(data_dag3)

```

```{r}
dag3 = model2network("[P][N][C][PC|P:N:C][Cr|P:N:C][I|P:N:C]")
```

```{r}
graphviz.plot(dag3, shape = "ellipse")
```

```{r}
str(data_dag3)
```

```{r}
data_dag3 <- data_dag3 |>
  mutate(across(where(is.character), ~ as.numeric(gsub(",", ".", .))))
```

```{r}
crop_fit = bn.fit(dag3, data = data_dag3)
```

```{r}
crop_fit
```

```{r}
mod_lm = lm(I~P + N + C, data = data_dag3)
coef(mod_lm)
```

```{r}
ggplot(data_dag3, aes(x = N, y = PC)) +
  geom_point(color = "steelblue", alpha = 0.3) +
  geom_smooth(method = lm, se = FALSE, lwd = 2, color = "dodgerblue") +
  labs(x = "Gases del Trafico", y = "Niveles de insulina", title = "") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5, face = "bold", margin = margin(0, 0, 5, 0)),
        axis.title.x = element_text(face = "bold"),
        axis.title.y = element_text(face = "bold", angle = 90))
```

```{r}
library(mgcv)
library(gratia)
```

```{r}
mod_gam_N3 = gam(N ~ s(I), data = data_dag3, method = "REML")
```

```{r}
draw(mod_gam_N3, residuals = TRUE, rug = FALSE) +
  labs(x = "Gases del Trafico", y = "s(Niveles de insulina)", title = "Efecto parcial de los gases del trafico sobre la glucosa acumulada") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5, face = "bold",
                                  margin = margin(0, 0, 5, 0)),
        axis.title.x = element_text(face = "bold"),
        axis.title.y = element_text(face = "bold", angle = 90),
        legend.title = element_text(hjust = 0.5, face = "bold"),
        legend.text = element_text(hjust = 0.5),
        strip.text = element_text(hjust = 0.5, face = "bold",
                                  margin = margin(2, 3, 3, 3)),
        plot.subtitle = element_text(hjust = 0.5, face = "bold",
                                     size = 10,
                                     margin = margin(0, 0, 5, 0)))
```

```{r}
vars <- nodes(dag3)                                       # nodos del DAG (p.ej. P,N,A,Gc,Ga,I)
data_sub <- data_dag3[, vars, drop = FALSE]               # solo columnas del DAG
data_cc  <- data_sub[complete.cases(data_sub), , drop=FALSE]  # sin NAs

# Diagnóstico
cat("Filas totales:", nrow(data_sub), "\n")
cat("Filas completas:", nrow(data_cc), "\n")

# Puntuar con BIC gaussiano
score(dag3, data = data_cc, type = "bic-g")
score(dag3, data = data_cc, type = "aic-g")
```
>   Tenemos un score **BIC** de `-45192.68`

>   Tenemos un score **AIC** de `-45136.43`

# DAG Elegida

## DAG 2 – Contaminación ↔ Inflamación sistémica y eje metabólico

La dag con mejor score tanto **BIC** como **AIC** es la `DAG 2`.

### Nodos padre (exposición ambiental)

-   `P` — **PM_2_5**: partículas finas inhalables con penetración alveolar y paso a sangre.  
-   `N` — **NOx**: óxidos de nitrógeno asociados al tráfico y combustión.

### Nodos hijos (outcomes/biomarcadores)

-   `Gc` — **valor_PROTCREAC (PCR-us)**: inflamación de bajo grado.  
-   `CRP` — **valor_PCR (PCR)**: inflamación sistémica/aguda.  
-   `Hb` — **valor_HB1AC (HbA1c)**: control glucémico crónico (~3 meses).  
-   `Ga` — **valor_GLU_SUERO**: glucosa sérica actual.  
-   `I` — **valor_INSULINA**: hormona reguladora del metabolismo de la glucosa.  

### Estructura conceptual

-   `P`, `N` → {`Gc`, `Ga`, `I`}  
-   `Hb` ← {`I`, `Ga`, `P`, `N`}  
-   `CRP` ← {`Gc`, `P`, `N`}  


## Integración de la variable **Sexo**

Para integrar esta variable a nuestra DAG vamos a tener que recurrir a transformar nuestra GNB dentro de una GNB Condicional.

La variable de sexo es una variable categorica y en la GNB tenemos solo continuas, por lo que ocupamos hacer la transformación.

```{r}
data4 <- contaminantes |>
  select(Entidad, PM_2_5, NOx) |>
  group_by(Entidad) |>
  summarise(PM_2_5 = mean(PM_2_5, na.rm = TRUE),
            NOx    = mean(NOx,    na.rm = TRUE),
            .groups = "drop")

data4 <- data4 |>
  inner_join(catalogo_entidades, by = "Entidad") |>
  arrange(codigo)

head(data4)
```

```{r}
data5 <- muestras |>
  select(FOLIO_I, h0303, h0302, valor_HB1AC, valor_GLU_SUERO, valor_INSULINA, valor_PROTCREAC,valor_PCR)

head(data5)
```

```{r}
data6 <- info |>
  select(FOLIO_I, h0317a, h0317g, entidad = entidad1, region, estrato, h0302)

head(data6)
```



## Unión de tablas
```{r}
data5 <- data5 |> dplyr::distinct(FOLIO_I, .keep_all = TRUE)
data6 <- data6 |> dplyr::distinct(FOLIO_I, .keep_all = TRUE)
```

```{r}
data_ensanut <- data5 |>
  inner_join(data6, by = "FOLIO_I", suffix = c(".muestras", ".socdem")) |>
  mutate(
    # elige prioridad: primero muestras, si es NA toma socdem
    h0302 = coalesce(h0302.muestras, h0302.socdem)
  ) |>
  select(-h0302.muestras, -h0302.socdem)
```

```{r}
aire_ent <- data4 |>
  transmute(codigo, PM_2_5, NOx) 

data_final3 <- data_ensanut |>
  left_join(aire_ent, by = c("entidad" = "codigo"))

View(data_final3)
```

```{r}
data5 <- data_final3 |> 
  mutate(across(contains("valor"), ~ as.numeric(gsub(",", ".", .))))
```


```{r}
data_dag_inf <- data_final3 |> 
  select(NOx, PM_2_5, valor_PROTCREAC,valor_PCR,valor_HB1AC,valor_INSULINA,valor_GLU_SUERO, h0302) |> drop_na()
```
```{r}
conteo_1 <- sum(data_dag_inf$h0302 == 2, na.rm = TRUE)
conteo_1
```


```{r}
colnames(data_dag_inf) = c("N","P", "Gc","CRP", "Hb", "I","Ga", "S")
view(data_dag_inf)

```

- La 'edad' influye en los biomarcadores.
- No es efecto de la contaminación.
- Lo adecuado es integrarlo como padre adicional.

```{r}
library(bnlearn)

dag2 = model2network("[N][P][S][Gc|P:N:S][I|P:N:S][Ga|P:N:S][Hb|I:Ga:P:N:S][CRP|Gc:P:N:S]")


```

```{r}
graphviz.plot(dag2, shape = "ellipse")
```

```{r}
str(data_dag_inf)
```

```{r}
data_dag_inf <- data_dag_inf |>
  mutate(across(where(is.character), ~ as.numeric(gsub(",", ".", .))))
```

```{r}
crop_fit = bn.fit(dag2, data = data_dag_inf)
```


```{r}
mod_lm = lm(N~Gc, data = data_dag_inf)
coef(mod_lm)
```

```{r}
ggplot(data_dag_inf, aes(x = N, y = Gc)) +
  geom_point(color = "steelblue", alpha = 0.3) +
  geom_smooth(method = "lm", se = FALSE, size = 1.2, color = "dodgerblue") +
  labs(x = "NOx (N)", y = "Glucosa acumulada (Gc)", title = "Relación NOx y Glucosa Acumulada") +
  theme_bw() +
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold", margin = margin(0, 0, 5, 0)),
    axis.title.x = element_text(face = "bold"),
    axis.title.y = element_text(face = "bold", angle = 90)
  )
```

```{r}
mod_gam_N <- gam(N ~ s(Gc), data = data_dag_inf, method = "REML")
```

```{r}
draw(mod_gam_N, residuals = TRUE, rug = FALSE) +
  labs(x = "Glucosa acumulada (Gc)", y = "s(NO x)", 
       title = "Efecto parcial de la glucosa acumulada sobre NOx") +
  theme_bw() +
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold", margin = margin(0, 0, 5, 0)),
    axis.title.x = element_text(face = "bold"),
    axis.title.y = element_text(face = "bold", angle = 90),
    legend.title = element_text(hjust = 0.5, face = "bold"),
    legend.text = element_text(hjust = 0.5),
    strip.text = element_text(hjust = 0.5, face = "bold", margin = margin(2, 3, 3, 3)),
    plot.subtitle = element_text(hjust = 0.5, face = "bold", size = 10, margin = margin(0, 0, 5, 0))
  )
```

```{r}
vars <- nodes(dag2)                                      # nodos del DAG (p.ej. P,N,A,Gc,Ga,I)
data_sub <- data_dag_inf[, vars, drop = FALSE]                  # solo columnas del DAG
data_sub <- data_sub |> 
  mutate(across(where(is.factor), ~ as.numeric(as.character(.))),
         across(where(is.integer), as.numeric))
data_cc <- data_sub[complete.cases(data_sub), , drop = FALSE]   # sin NAs

# Diagnóstico
cat("Filas totales:", nrow(data_sub), "\n")
cat("Filas completas:", nrow(data_cc), "\n")

# Puntuar con BIC gaussiano
score(dag2, data = data_cc, type = "bic-g")
score(dag2, data = data_cc, type = "aic-g")
```

> Tras drop_na(), quedaron muy pocas filas completas. Esto genera varianzas residuales nulas o colinealidad en alguna regresión del DAG, haciendo que el score tienda a -infinito.


# Queries

## Supuestos de valores aceptables (DAG 2 con sexo, solo mujeres)

Los siguientes rangos se consideran **aceptables** para las variables incluidas en la DAG 2.  
Los valores fuera de estos límites se interpretan como **no aceptables** (posible error, condición clínica o exposición extrema).

### Contaminantes (fuentes fijas: energía/industria)

- **NOx (N)**: 10 – 400 µg/m³  
- **PM₂.₅ (P)**: 5 – 300 µg/m³  

> Valores fuera de este rango se consideran atípicos en contextos industriales fijos.

---

### Biomarcadores inflamatorios y metabólicos

- **Proteína C Reactiva ultrasensible (Gc, PCR-us)**: 0 – 10 mg/L  
- **Proteína C Reactiva (CRP)**: 0 – 30 mg/dL  
- **Glucosa sérica (Ga)**: 70 – 100 mg/dL (ayuno normal en mujeres)  
- **Insulina (I)**: 5 – 25 µIU/mL (ayuno, rango fisiológico en mujeres)  
- **Hemoglobina glucosilada (Hb, HbA1c)**:  
  - < 5.7 % → Normal  
  - 5.7 – 6.4 % → Prediabetes  
  - ≥ 6.5 % → Diabetes  
- **Hemoglobina total (Hb fisiológica, g/dL)**: 12.3 – 15.3 g/dL en mujeres

---

### Covariable

- **Sexo (S)**: Solo se incluyen **mujeres** (valor esperado: "M" o equivalente codificado).  

---

### Referencias

- Asociación Americana de Diabetes (ADA) — [diabetes.org](https://diabetes.org/about-diabetes/a1c?utm_source=chatgpt.com)  
- Cleveland Clinic — [my.clevelandclinic.org](https://my.clevelandclinic.org/health/diagnostics/9731-a1c?utm_source=chatgpt.com)  
- Nourish Health — [usenourish.com](https://www.usenourish.com/blog/what-is-a-normal-insulin-level-for-a-woman?utm_source=chatgpt.com)  
- ZOE Science & Nutrition — [zoe.com](https://zoe.com/learn/what-are-normal-insulin-levels-for-women?srsltid=AfmBOoreNOiY6ryRsOlyKj1BtZrhgjLUZ3jzi35XAGvxs1roYLvysrep&utm_source=chatgpt.com)  
- Medscape — [emedicine.medscape.com](https://emedicine.medscape.com/article/2089224-overview?utm_source=chatgpt.com)  

## Querie 1

```{r}
nodes(crop_fit)
```
```{r}
conteo_N_400 <- sum(data_dag_inf$N > 400, na.rm = TRUE)
conteo_N_400
```
```{r}
total_filas <- nrow(data_dag_inf)
total_filas
```

> ¿Cuál es la probabilidad de tener hiperinsulinemia `(I > 25 µIU/mL)` e hiperglucemia `(Ga > 100 mg/dL)` dado alta exposición a NOx `(N >= 400)` ?

$$
\mathbb{P}\big( I > 25 ,  Ga > 100 \;\big|\; N \geq 400 \big)
$$
```{r}
set.seed(123)

crop_fit_query <- bn.fit(dag2, data = data_dag_inf)

prob_query <- cpquery(crop_fit_query, event = (I > 25) & (Ga > 100), evidence = list(N = 400), method = "lw", n = 100000)

prob_query
```
> La probabilidad es de `0.10696`

#Querie 2

> ¿Cuál es la probabilidad de tener hiperglucemia `(Ga > 100 mg/dL)`dado alta exposición a PM2-5 `(N >= 150µg/m^3)` ?

$$
\mathbb{P}\big( Gc > 5mg/L \;\big|\; P \geq 150 \big)
$$
```{r}
set.seed(123)

crop_fit_query <- bn.fit(dag2, data = data_dag_inf)

prob_query <- cpquery(crop_fit_query, event = (Ga > 100) , evidence = list(P = 150), method = "lw", n = 100000)

prob_query
```
> La probabilidad es de `0.53368`


